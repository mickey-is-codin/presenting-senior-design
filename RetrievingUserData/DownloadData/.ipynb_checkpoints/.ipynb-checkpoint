{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Empatica Watch Data Scraper Prototype</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>The purpose of this notebook is to create an informative program demonstrating our methods for fetching data via Empatica Health's (LINK HERE) E4 Watch for biometric signals</p>\n",
    "\n",
    "<p>This notebook will achieve the following in order to allow further signal analysis</p>\n",
    "\n",
    "<ul>\n",
    "    <li>Gather user input to submit form requests to empatica's website</li>\n",
    "    <li>Query Empatica's site using supplied credentials</li>\n",
    "    <li>Parse Empatica's API download elements for useful information</li>\n",
    "    <li>Store all of this useful information locally in subdivided folders</li>\n",
    "    <li>Copy pertinent scripts to each session for further analysis or data subdivision</li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Pertinent Library Importing</h3>\n",
    "\n",
    "<p>For the purposes of this notebook we will need several basic Python libraries. Each one will be commented and explained in the context of this assignment.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import getpass\n",
    "import subprocess\n",
    "from datetime import datetime\n",
    "import requests\n",
    "import zipfile\n",
    "import StringIO\n",
    "from shutil import copyfile\n",
    "from bs4 import BeautifulSoup\n",
    "from urllib2 import urlopen\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import ssl\n",
    "ssl._create_default_https_context = ssl._create_unverified_context"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Preliminary Structure Understanding</h3>\n",
    "\n",
    "<p>Now that we have the appropriate libraries we can see which files exist in our current folder. These files are important because we will want to copy each one into a data folder along with the empatica data so that each can be analyzed individually in an automated fashion :)</p>\n",
    "\n",
    "<p>Let's see which files exist to be copied into each data folder we create:</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFetcher.ipynb Output.png        \u001b[31maddHeaders.sh\u001b[m\u001b[m\r\n"
     ]
    }
   ],
   "source": [
    "!ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Looks great! The specifics of each of these files will be explored in further notebooks and documentation, but we are able to see a basic set of analysis and subdivision scripts that will be useful later</p>\n",
    "\n",
    "<p>Since our goal is to get this script to save us time later and necessitate very little code manipulation in the future, we'll have to make our script able to reference the current folder structure and work based on that so that it can learn based on the number of sessions</p>\n",
    "\n",
    "<p>Let's make a variable for the number of folders that exist in our current folder--that will ultimately represent the amount of data sessions that have been gathered for an individual patient.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "folder_nums = int(subprocess.check_output('find ./* -maxdepth 0 -type d | wc -l', shell=True))\n",
    "print folder_nums"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>That looks about right! We don't have any patient data sessions downloaded yet! Let's fix that in the next few steps</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Website Exploration</h3>\n",
    "\n",
    "<p>Let's check out Empatica's data portal and see what we can find:</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Base URL to navigate the data on their site. Every URL will be an extension of this.\n",
    "base_url = 'https://www.empatica.com/connect/'\n",
    "\n",
    "# Start HTTP Session. This allows us to stay \"logged in\"\n",
    "s = requests.session()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>So now we have a login session created for Empatica's site but no actual data supplied to that session. That hardly does us any good, so we'll use the login necessary that links us to one individual patient's watch</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "What is your email: torment10@aim.com\n",
      "What is your password: ········\n"
     ]
    }
   ],
   "source": [
    "# We'll supply the login information in base64 encrypted data in a manner compatible with Empatica's site\n",
    "data = {'username':raw_input('\\nWhat is your email: '), 'password':getpass.getpass('What is your password: ')}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [200]>\n"
     ]
    }
   ],
   "source": [
    "# Did the login work?\n",
    "login_response = s.post(base_url+'authenticate.php', data)\n",
    "print login_response"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>This is great news! A 200 HTTP response is a browser's way of telling us that we successfully reached the website with no errors! We would watch out at this step for any errors in the 400 or 500 range. However if our password or email were incorrect then we would still see 200, it would just mean we successfully accessed the page saying we supplied incorrect information. We will see a 403 error later if this has been the case so we'll be on the lookout for that.</p>\n",
    "\n",
    "<p>Let's assume it worked and try to get some information from the site that only a logged in user would be able to get!</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [200]>\n"
     ]
    }
   ],
   "source": [
    "# We can check the html code for the page we landed on with the following code.\n",
    "sessions_response_html = s.get(base_url+'connect.php/users/19466/sessions?from=0&to=999999999999')\n",
    "print sessions_response_html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Success! Our ability to fetch this page has proven that not only was our login information correct, but we supplied the correct packaging for the login information in the form of our previous session that we created!</p>\n",
    "\n",
    "<p>This is a big step towards data gathering, now all we have to do is scrape that data!</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Data Scraping</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{\"id\":\"548689\",\"start_time\":\"1537260782\",\"duration\":\"10567\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"548769\",\"start_time\":\"1537271996\",\"duration\":\"7590\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"548878\",\"start_time\":\"1537284101\",\"duration\":\"3561\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"549911\",\"start_time\":\"1537431643\",\"duration\":\"17427\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"550080\",\"start_time\":\"1537452016\",\"duration\":\"5963\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"550164\",\"start_time\":\"1537460984\",\"duration\":\"5049\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"550523\",\"start_time\":\"1537518155\",\"duration\":\"10215\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"550640\",\"start_time\":\"1537528887\",\"duration\":\"13901\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"550896\",\"start_time\":\"1537621330\",\"duration\":\"772\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"550989\",\"start_time\":\"1537631297\",\"duration\":\"17139\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"550993\",\"start_time\":\"1537689806\",\"duration\":\"5017\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"551022\",\"start_time\":\"1537699582\",\"duration\":\"9114\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"551028\",\"start_time\":\"1537711071\",\"duration\":\"789\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"551047\",\"start_time\":\"1537711884\",\"duration\":\"22164\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"551130\",\"start_time\":\"1537770882\",\"duration\":\"4954\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"551541\",\"start_time\":\"1537780247\",\"duration\":\"41155\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"551691\",\"start_time\":\"1537823344\",\"duration\":\"14172\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"551921\",\"start_time\":\"1537856113\",\"duration\":\"28719\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"552136\",\"start_time\":\"1537903382\",\"duration\":\"2454\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"552391\",\"start_time\":\"1537907531\",\"duration\":\"16575\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"552864\",\"start_time\":\"1537951591\",\"duration\":\"45154\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"552973\",\"start_time\":\"1537998361\",\"duration\":\"13786\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"553012\",\"start_time\":\"1538018479\",\"duration\":\"16052\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"553337\",\"start_time\":\"1538037578\",\"duration\":\"25227\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"553351\",\"start_time\":\"1538063733\",\"duration\":\"1088\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"553591\",\"start_time\":\"1538080495\",\"duration\":\"32761\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"553922\",\"start_time\":\"1538116503\",\"duration\":\"38880\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"553992\",\"start_time\":\"1538159663\",\"duration\":\"586\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"554210\",\"start_time\":\"1538202748\",\"duration\":\"17340\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568004\",\"start_time\":\"1538222984\",\"duration\":\"-37\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"3\",\"exit_code\":\"2\"},{\"id\":\"568003\",\"start_time\":\"1538239738\",\"duration\":\"1519\",\"device_id\":\"fc9618\",\"label\":\"5034\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568010\",\"start_time\":\"1540450842\",\"duration\":\"96\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568011\",\"start_time\":\"1540450956\",\"duration\":\"189\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568017\",\"start_time\":\"1540451307\",\"duration\":\"195\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568022\",\"start_time\":\"1540451586\",\"duration\":\"189\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568027\",\"start_time\":\"1540451869\",\"duration\":\"192\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568029\",\"start_time\":\"1540452139\",\"duration\":\"195\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568033\",\"start_time\":\"1540452511\",\"duration\":\"189\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568042\",\"start_time\":\"1540452940\",\"duration\":\"127\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568051\",\"start_time\":\"1540453470\",\"duration\":\"196\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568053\",\"start_time\":\"1540453708\",\"duration\":\"195\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"},{\"id\":\"568054\",\"start_time\":\"1540453952\",\"duration\":\"72\",\"device_id\":\"1da32b\",\"label\":\"4735\",\"device\":\"E4 2.1\",\"status\":\"0\",\"exit_code\":\"0\"}]\n"
     ]
    }
   ],
   "source": [
    "# We don't just want a response message, we want data! Let's get the actual html code from that site.\n",
    "sessions_json = sessions_response_html.text\n",
    "print sessions_json"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Whoa! That's a lot of data! It doesn't make much sense as is, but our aptly named variable above gives a good hint that this data is in a common web format called JSON. Luckily Python is great at handling these JSON objects!</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This should create a more usable, UTF-8 data variable for us to scrape.\n",
    "# All UTF-8 means in this context is that it's text we can parse.\n",
    "parsed = json.loads(sessions_json)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>From the original JSON data we can get some useful information. We are able to see \"id\" items that look like they're specific to every session that the user has logged. Let's see if we can get a list of these sessions--it would be useful to be able to access them individually by id later</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"10567\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"548689\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537260782\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"7590\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"548769\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537271996\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"3561\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"548878\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537284101\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"17427\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"549911\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537431643\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"5963\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"550080\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537452016\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"5049\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"550164\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537460984\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"10215\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"550523\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537518155\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"13901\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"550640\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537528887\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"772\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"550896\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537621330\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"17139\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"550989\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537631297\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"5017\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"550993\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537689806\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"9114\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"551022\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537699582\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"789\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"551028\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537711071\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"22164\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"551047\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537711884\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"4954\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"551130\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537770882\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"41155\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"551541\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537780247\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"14172\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"551691\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537823344\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"28719\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"551921\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537856113\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"2454\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"552136\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537903382\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"16575\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"552391\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537907531\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"45154\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"552864\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537951591\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"13786\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"552973\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1537998361\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"16052\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"553012\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538018479\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"25227\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"553337\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538037578\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"1088\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"553351\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538063733\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"32761\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"553591\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538080495\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"38880\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"553922\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538116503\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"586\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"553992\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538159663\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"17340\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"554210\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538202748\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"-37\", \n",
      "        \"exit_code\": \"2\", \n",
      "        \"id\": \"568004\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538222984\", \n",
      "        \"status\": \"3\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"fc9618\", \n",
      "        \"duration\": \"1519\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568003\", \n",
      "        \"label\": \"5034\", \n",
      "        \"start_time\": \"1538239738\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"96\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568010\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540450842\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"189\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568011\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540450956\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"195\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568017\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540451307\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"189\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568022\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540451586\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"192\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568027\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540451869\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"195\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568029\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540452139\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"189\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568033\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540452511\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"127\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568042\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540452940\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"196\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568051\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540453470\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"195\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568053\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540453708\", \n",
      "        \"status\": \"0\"\n",
      "    }, \n",
      "    {\n",
      "        \"device\": \"E4 2.1\", \n",
      "        \"device_id\": \"1da32b\", \n",
      "        \"duration\": \"72\", \n",
      "        \"exit_code\": \"0\", \n",
      "        \"id\": \"568054\", \n",
      "        \"label\": \"4735\", \n",
      "        \"start_time\": \"1540453952\", \n",
      "        \"status\": \"0\"\n",
      "    }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "# Let's clean up those JSON's to make them a bit more readable and indexable via Python.\n",
    "sessions_list = json.dumps(parsed, indent=4, sort_keys=True)\n",
    "print sessions_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Ok so we've got much more readable infromation objects now. This has created a Python object called a dictionary that we can access quite easily. We've successfully accessed basic information for each of our patient's logged data sessions with the Empatica!</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Local Saving</h3>\n",
    "\n",
    "<p>We now have user logged in sessions for the Empatica. But we haven't seen an actual signal yet, so let's do a bit of clever pre-planning and then get our hands dirty with some signals!</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42\n"
     ]
    }
   ],
   "source": [
    "# Get a variable for the number of sessions that we see from the website.\n",
    "num_sessions = len(parsed)\n",
    "print num_sessions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>This script is supposed to automate work and save us time later right? I don't want to manually download every session every time I use this script and I don't want every session to download every time, so let's find the difference between the number of sessions currently on our machine and the number of sessions we just found on the website.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42\n"
     ]
    }
   ],
   "source": [
    "discrep = num_sessions - folder_nums\n",
    "print discrep"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>That's exactly right! We now know how many sessions we are missing in the current machine so that this script can be used periodically without generating a massive data download or downloading redundant data. This may seem like a basic arithmetic now but when we get into the range of hundreds of sessions per patient this will be extremely useful to have automated.</p>\n",
    "\n",
    "<p>The next step is to index and download the correct sessions. Since Empatica increases the id number for each session and creates a URL specific to that session (thankfully) we are easily able to query their site and gather information for each session that we want.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[u'548689', u'548769', u'548878', u'549911', u'550080', u'550164', u'550523', u'550640', u'550896', u'550989', u'550993', u'551022', u'551028', u'551047', u'551130', u'551541', u'551691', u'551921', u'552136', u'552391', u'552864', u'552973', u'553012', u'553337', u'553351', u'553591', u'553922', u'553992', u'554210', u'568004', u'568003', u'568010', u'568011', u'568017', u'568022', u'568027', u'568029', u'568033', u'568042', u'568051', u'568053', u'568054']\n"
     ]
    }
   ],
   "source": [
    "# List of all the sessions we see on Empatica's website.\n",
    "id_list = [parsed[i]['id'] for i in range(0,len(parsed))]\n",
    "print id_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Ignore the 'u' in front of each number. It just means that we've got a list of unicode strings and will be ignored by Python so there's no need for us to pay attention to it.</p>\n",
    "\n",
    "<p>Since we saw earlier in that JSON object that every session has a start and end time, we can actually utilize the start time of the session for some useful metrics. Let's get a list of all the starting times of each session</p>\n",
    "\n",
    "<p>Another important note here is that Empatica stores the start and end dates in Unix Epoch Time. That's a gross way of saying each start time is saved in their system as the amount of seconds since January 1, 1970, because programmers are annoying. We'll convert that to regular readable dates and times in the same step.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2018-09-18-08:53:02', '2018-09-18-11:59:56', '2018-09-18-15:21:41', '2018-09-20-08:20:43', '2018-09-20-14:00:16', '2018-09-20-16:29:44', '2018-09-21-08:22:35', '2018-09-21-11:21:27', '2018-09-22-13:02:10', '2018-09-22-15:48:17', '2018-09-23-08:03:26', '2018-09-23-10:46:22', '2018-09-23-13:57:51', '2018-09-23-14:11:24', '2018-09-24-06:34:42', '2018-09-24-09:10:47', '2018-09-24-21:09:04', '2018-09-25-06:15:13', '2018-09-25-19:23:02', '2018-09-25-20:32:11', '2018-09-26-08:46:31', '2018-09-26-21:46:01', '2018-09-27-03:21:19', '2018-09-27-08:39:38', '2018-09-27-15:55:33', '2018-09-27-20:34:55', '2018-09-28-06:35:03', '2018-09-28-18:34:23', '2018-09-29-06:32:28', '2018-09-29-12:09:44', '2018-09-29-16:48:58', '2018-10-25-07:00:42', '2018-10-25-07:02:36', '2018-10-25-07:08:27', '2018-10-25-07:13:06', '2018-10-25-07:17:49', '2018-10-25-07:22:19', '2018-10-25-07:28:31', '2018-10-25-07:35:40', '2018-10-25-07:44:30', '2018-10-25-07:48:28', '2018-10-25-07:52:32']\n"
     ]
    }
   ],
   "source": [
    "# List of all start dates for each session\n",
    "date_list_datetime = [datetime.utcfromtimestamp(int(parsed[i]['start_time'])).strftime('%Y-%m-%d-%H:%M:%S') for i in range(0,len(parsed))]\n",
    "print date_list_datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Those dates look pretty readable, so it looks like our conversion worked! The next step will be a bit of a long one, but it'll do everything from correctly indexing which sessions to download to putting them into an appropriately named folder on our machine!</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Found a new session ( 548689 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-18-08:53:02 \n",
      "\n",
      "\n",
      "Found a new session ( 548769 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-18-11:59:56 \n",
      "\n",
      "\n",
      "Found a new session ( 548878 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-18-15:21:41 \n",
      "\n",
      "\n",
      "Found a new session ( 549911 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-20-08:20:43 \n",
      "\n",
      "\n",
      "Found a new session ( 550080 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-20-14:00:16 \n",
      "\n",
      "\n",
      "Found a new session ( 550164 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-20-16:29:44 \n",
      "\n",
      "\n",
      "Found a new session ( 550523 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-21-08:22:35 \n",
      "\n",
      "\n",
      "Found a new session ( 550640 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-21-11:21:27 \n",
      "\n",
      "\n",
      "Found a new session ( 550896 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-22-13:02:10 \n",
      "\n",
      "\n",
      "Found a new session ( 550989 )!\n",
      "Downloading ...\n",
      "Download complete to folder 2018-09-22-15:48:17 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "downloads_url = base_url+'download.php'\n",
    "\n",
    "#for i in range(0,len(id_list[-discrep:])):\n",
    "for i in range(0,10):\n",
    "    if discrep > 0:\n",
    "        print \"\\nFound a new session (\",id_list[i],\")!\"\n",
    "        print \"Downloading ...\"\n",
    "        download_full_url = downloads_url + '?id=' + id_list[i]\t\n",
    "        download = s.get(download_full_url)\n",
    "\n",
    "        z = zipfile.ZipFile(StringIO.StringIO(download.content))\n",
    "\n",
    "        timestamp = date_list_datetime[i]\n",
    "        my_dir = os.path.join(os.getcwd(), timestamp)\n",
    "\n",
    "        if not os.path.isdir(my_dir):\n",
    "            os.makedirs(my_dir)\n",
    "        z.extractall(my_dir)\n",
    "\n",
    "        with open(my_dir+'/json_info.json', 'w') as outfile:\n",
    "            json.dump(parsed[i], outfile)\n",
    "            \n",
    "        print \"Download complete to folder\",timestamp,\"\\n\"\n",
    "\n",
    "\tif discrep == 0:\n",
    "\t\tprint \"No new sessions found to download, you're up to date!\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We've only retrieved the first 10 folders because as this process goes on our user will ideally log hundreds of sessions for analysis. Our retrieval process will then shine when we can get only the most recent x sessions, rather than all 100 or 200 they've actually logged. But if we did everything right, then every time we run this full (commented out) script, only the sessions that have been created since the last script execution will be added. Another notebook may go into how to automate this process on a server. (*Update Nov 02 2018* We actually have this logic working on an Ubuntu DigitalOcean server! It downloads individual controlled lab sessions for our personal analysis.) Ideally this script will be run on a web server in a way that is able to automate session downloading and allow a user to view all of the signal processing via a web browser.</p>\n",
    "\n",
    "<p>To make sure everything went right let's see a list of folders in our current machine location and find out if we have the correct number based on the amount we found on the website</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[34m2018-09-18-08:53:02\u001b[m\u001b[m \u001b[34m2018-09-20-08:20:43\u001b[m\u001b[m \u001b[34m2018-09-21-08:22:35\u001b[m\u001b[m \u001b[34m2018-09-22-15:48:17\u001b[m\u001b[m\r\n",
      "\u001b[34m2018-09-18-11:59:56\u001b[m\u001b[m \u001b[34m2018-09-20-14:00:16\u001b[m\u001b[m \u001b[34m2018-09-21-11:21:27\u001b[m\u001b[m DataFetcher.ipynb\r\n",
      "\u001b[34m2018-09-18-15:21:41\u001b[m\u001b[m \u001b[34m2018-09-20-16:29:44\u001b[m\u001b[m \u001b[34m2018-09-22-13:02:10\u001b[m\u001b[m \u001b[31maddHeaders.sh\u001b[m\u001b[m\r\n"
     ]
    }
   ],
   "source": [
    "!ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "# Same logic we used before to find amount of sessions in our machine\n",
    "print int(subprocess.check_output('find ./* -maxdepth 0 -type d | wc -l', shell=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Success! We're now able to collect every session that we found for our patient on Empatica's site!</p>\n",
    "\n",
    "<p>Let's see if a random session session has all of our csv information for our patient's signals</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ACC.csv        EDA.csv        IBI.csv        info.txt       tags.csv\r\n",
      "BVP.csv        HR.csv         TEMP.csv       json_info.json\r\n"
     ]
    }
   ],
   "source": [
    "!ls 2018-09-21-11:21:27"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Woo! We've got csv files for every biometric signal for this patient!</p>\n",
    "\n",
    "<p>Now we're going to create title columns in each of the csv files because Empatica does not include them by default. We've created a little bash script that will accomplish this for every session for us! Automation!</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subprocess.call('bash addHeaders.sh', shell=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>This zero is good news! Since this information didn't show up in our output because of some python notebook standard input output miscommunication, I'll include a screenshot of my terminal, showing the script's output. The 0 is essentially a terminal's version of the 200 response code we saw earlier, indicating there were no errors.</p>\n",
    "\n",
    "![Bash Script Output](Output.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Finally we'll copy all of our data folders into a different folder where we will be subsetting the data in the next notebook.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "!cp -r ./2018* ../SubsetData/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Conclusion</h3>\n",
    "\n",
    "<p>So there we have it. We've created a folder for every single Empatica session a patient has logged for a given account. We've created a scaleable data structure to house all of those sessions, and created methods for data pipelining in a way that will facilitate future signal processing on these signals</p>\n",
    "    \n",
    "<p>From here we have two options, we can either jump straight into signal processing (that will be a similar document layout to this but using Matlab) or begin to subset our data. Subsetting our data is useful because it allows individual sessions for experiments to be separated from the rest of our default data. That means we can log several 5 minute sessions of controls across different patients for metrics we are looking for. From here you can view the Matlab notebook for signal processing or otherwise our other Python noteboook for further subsetting of the data using Python</p>\n",
    "\n",
    "<p>Thanks for joining us in this data gathering odyssey and hopefully you stick around to see what we do with the data! If you're following things linearly, your next stop is the Data Subsetter Notebook.</p>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SeniorDesignData",
   "language": "python",
   "name": "seniordesigndata"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
